import{_ as e,p as t,q as d,a1 as a}from"./framework-5866ffd3.js";const r={},i=a(`<h1 id="配置参考" tabindex="-1"><a class="header-anchor" href="#配置参考" aria-hidden="true">#</a> 配置参考</h1><h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h2><p>后端默认使用内置的 Sqlite 来存储数据，如果不连接外部数据库，数据将在容器销毁后丢失。</p><p><code>chatgpt-ui-wsgi-server</code> 镜像提供环境变量 <code>DB_URL</code> 来配置与外部数据库的连接，以下是 <code>DB_URL</code> 的链接格式对照表。</p><table><thead><tr><th>数据库</th><th>链接</th></tr></thead><tbody><tr><td>PostgreSQL</td><td>postgres://USER:PASSWORD@HOST:PORT/DATABASE_NAME</td></tr><tr><td>MySQL</td><td>mysql://USER:PASSWORD@HOST:PORT/DATABASE_NAME</td></tr><tr><td>SQLite</td><td>sqlite:///PATH</td></tr></tbody></table><p>例如我使用 PostgreSQL，则配置如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>backend-wsgi-server:
    image: wongsaang/chatgpt-ui-wsgi-server:latest
    environment:
      - DB_URL=postgres://postgres:postgrespw@localhost:49153/chatgpt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="邮箱验证" tabindex="-1"><a class="header-anchor" href="#邮箱验证" aria-hidden="true">#</a> 邮箱验证</h2><p>如果你开放用户注册功能，并需要向用户发送邮箱激活链接，需要在 <code>wsgi-server</code> 服务中配置以下环境变量：</p><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>ACCOUNT_EMAIL_VERIFICATION</td><td>邮箱验证方式，可选值： none, optional, mandatory</td><td>optional</td></tr><tr><td>EMAIL_HOST</td><td>SMTP 服务器地址</td><td>smtp.mailgun.org</td></tr><tr><td>EMAIL_PORT</td><td>SMTP 服务器端口号</td><td>587</td></tr><tr><td>EMAIL_HOST_USER</td><td>用户名</td><td>-</td></tr><tr><td>EMAIL_HOST_PASSWORD</td><td>密码</td><td>-</td></tr><tr><td>EMAIL_USE_TLS</td><td>是否加密</td><td>True</td></tr><tr><td>EMAIL_FROM</td><td>发件邮箱</td><td>webmaster@localhost</td></tr></tbody></table><h2 id="api-代理" tabindex="-1"><a class="header-anchor" href="#api-代理" aria-hidden="true">#</a> API 代理</h2><p>如果您的网络无法请求 OpenAI 的 API 地址，您可以在 <code>wsgi-server</code> 服务中配置代理，如何搭建代理服务，需要您自行搜索。</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>backend-wsgi-server:
    image: wongsaang/chatgpt-ui-wsgi-server:latest
    environment:
      - OPENAI_API_PROXY=https://openai.proxy.com/v1 # 注意，域名后面需要带上 v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="后端-csrf-白名单" tabindex="-1"><a class="header-anchor" href="#后端-csrf-白名单" aria-hidden="true">#</a> 后端 CSRF 白名单</h2><p>如果你在访问管理后台的时候遇到 <code>CSRF verification failed</code>，可能你的 <code>APP_DOMAIN</code> 没有配置对。在 <code>wsgi-server</code> 服务下有个环境变量 <code>wsgi-server</code>。 它的值应该是 <code>backend-web-server</code> 的地址+端口, 默认： <code>localhost:9000</code>。</p><p>假如我把 <code>chagpt.com</code> 这个域名解析到了服务器，并且我的 <code>backend-web-server</code> 服务绑定了 9000 这个端口。正确的配置如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>backend-wsgi-server:
    image: wongsaang/chatgpt-ui-wsgi-server:latest
    environment:
      - APP_DOMAIN=chagpt.com:9000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="客户端配置" tabindex="-1"><a class="header-anchor" href="#客户端配置" aria-hidden="true">#</a> 客户端配置</h2><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>SERVER_DOMAIN</td><td>服务端地址</td><td>http://backend-web-server</td></tr><tr><td>DEFAULT_LOCALE</td><td>默认语言</td><td>en</td></tr><tr><td>NUXT_PUBLIC_APP_NAME</td><td>应用名称</td><td>ChatGPT UI</td></tr><tr><td>NUXT_PUBLIC_TYPEWRITER</td><td>是否开启 打字机 效果[true/false]</td><td>true</td></tr><tr><td>NUXT_PUBLIC_TYPEWRITER_DELAY</td><td>打字机效果的延迟时间，单位：毫秒</td><td>50</td></tr></tbody></table><h2 id="用户注册控制" tabindex="-1"><a class="header-anchor" href="#用户注册控制" aria-hidden="true">#</a> 用户注册控制</h2><p>部署完整后，在管理后台的 <code>Chat-&gt;Setting</code> 下面有 <code>open_registration</code> 设置项，用于控制是否开放用户注册。默认是 <code>True</code> (允许用户注册)，如果不需要，请改成 <code>False</code>。</p><h2 id="网页搜索功能控制" tabindex="-1"><a class="header-anchor" href="#网页搜索功能控制" aria-hidden="true">#</a> 网页搜索功能控制</h2><p>该功能默认处于关闭状态，你可以在管理后台的 <code>Chat-&gt;Settings</code> 中开启它，在 Settings 中有一个 <code>open_web_search</code> 的设置项，把它的值设置为 <code>True</code>。</p><h2 id="节俭模式控制" tabindex="-1"><a class="header-anchor" href="#节俭模式控制" aria-hidden="true">#</a> 节俭模式控制</h2><p>该功能默认处于开启状态，你可以在管理后台的 <code>Chat-&gt;Settings</code> 中关闭它，在 Settings 中有一个 <code>open_frugal_mode_control</code> 的设置项，把它的值设置为 <code>False</code>。</p>`,26),n=[i];function s(c,o){return t(),d("div",null,n)}const l=e(r,[["render",s],["__file","configuration.html.vue"]]);export{l as default};
